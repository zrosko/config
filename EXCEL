   @GetMapping("/excel")
    public void exportToExcel(HttpServletResponse response) throws Exception {
        response.setContentType("application/octet-stream");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
        String currentDateTime = dateFormatter.format(new Date());

        String headerKey = "Content-Disposition";
        String headerValue = "attachment; filename=users_" + currentDateTime + ".xlsx";
        response.setHeader(headerKey, headerValue);

        List<NexGenValueObject> listValueObjects = new ArrayList<NexGenValueObject>();
        /**
         * To enable export of SQL Entity data to Excel, make all Entity attributes public,
         * extend NexGenValueObject, do mapping in a FOR loop Entity to NexGenValueObject.
         */
        List<BusinessUnit> listBusinessUnits = (List<BusinessUnit>) businessUnitRepository.findAll();
        for(BusinessUnit row: listBusinessUnits){
            listValueObjects.add(row);
        }
        XSSFWorkbook excelFile = NexGenExcelUtils.prepareExcelFromData(listValueObjects);
        ServletOutputStream outputStream = response.getOutputStream();
        excelFile.write(outputStream);
        excelFile.close();
        outputStream.close();
    }
    
    package com.rbc.nexgen.eureka.core.excel;

import com.rbc.nexgen.eureka.core.NexGenValueObject;
import lombok.experimental.UtilityClass;
import lombok.extern.log4j.Log4j2;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;

//https://www.petrikainulainen.net/programming/spring-framework/spring-batch-tutorial-reading-information-from-an-excel-file/
@Log4j2
@UtilityClass
public class NexGenExcelUtils {

    public static XSSFWorkbook prepareExcelFromData(List<NexGenValueObject> data) throws Exception {
        NexGenExcelExporter nexGenExcelExporter = new NexGenExcelExporter(data);
        if(nexGenExcelExporter.writeHeaderLine()) {
            nexGenExcelExporter.writeDataLines();
        }
        return nexGenExcelExporter.workbook;
    }
    //TODO accept the list with explicit classes instead of NexGenValueObject e.g. Application
    public static List<NexGenValueObject> loadListFromExcel(String excelFileName) throws Exception {
        File xlsFile = new File(excelFileName);
        String ext = getFileExtension(excelFileName);

        if (ext.equalsIgnoreCase("xls")) {
            //Old Excel format
            return loadListFromExcelXls(xlsFile);
        } else if (ext.equalsIgnoreCase("xlsx")) {
            //New Excel format
            return loadListFromExcelXlsx(xlsFile);
        } else {
            throw new Exception("EXCEPTION - FILE EXTENSION NOT RECOGNIZED, IT SHOULD XLS or XLSX");
        }
    }
    public static List<NexGenValueObject> loadListFromExcelXls(File xlsFile) throws Exception {
        List<NexGenValueObject> valueObjectsList = new ArrayList<>();
        InputStream xlsFIS = new FileInputStream(xlsFile);
        Workbook workbook = new HSSFWorkbook(xlsFIS);
        xlsFIS.close();
        Sheet sheet = workbook.getSheetAt(0);//TODO see name instead of number
        //Here we keep the names of the columns
        LinkedHashMap<String, String> metaData = new LinkedHashMap<String, String>();
        // Iterate through each rows from first sheet
        Iterator<Row> rowIterator = sheet.iterator();
        int rowCount = 1;
        while (rowIterator.hasNext()) {
            NexGenValueObject valueObject = new NexGenValueObject();
            Row row = rowIterator.next();
            //Fore each row iterate through each column
            Iterator<Cell> cellIterator = row.cellIterator();

            while (cellIterator.hasNext()) {

                Cell cell = cellIterator.next();
                int cellIndex = cell.getColumnIndex();
                String cellValue="";

                switch (cell.getCellType()) {
                    case BLANK:
                    case ERROR:
                        cellValue="";
                        break;
                    case BOOLEAN:
                        cellValue= String.valueOf(cell.getBooleanCellValue());
                        break;
                    case NUMERIC:
                        cellValue= String.valueOf(cell.getNumericCellValue());
                        break;
                    case STRING:
                        cellValue= String.valueOf(cell.getStringCellValue());
                        break;
                    default:
                        cellValue="";
                        log.info("UNKNOWN"+cell.getColumnIndex());
                        break;
                }

                if(rowCount==1){
                    //first row we assume has header (column names)
                    metaData.put(String.valueOf(cellIndex), cellValue);
                } else {
                    //get the column name from metadata (row #1) saved
                    valueObject.setRaw(metaData.get(String.valueOf(cellIndex)),cellValue);
                }
            }
            if(rowCount>1) {
                valueObjectsList.add(valueObject);
            }
            rowCount++;
        }
        return valueObjectsList;
    }

    public static List<NexGenValueObject> loadListFromExcelXlsx(File xlsFile){
        //TODO for a new Excel (xlsx) file later (after the project MVP phase)
        List<NexGenValueObject> valueObjectsList = new ArrayList<>();
        return valueObjectsList;
    }

    private static String getFileExtension(String fileName) {
        String ext = "";
        int mid = fileName.lastIndexOf(".");
        ext = fileName.substring(mid + 1, fileName.length());
        return ext;
    }
}
package com.rbc.nexgen.eureka.core.excel;

import com.rbc.nexgen.eureka.core.NexGenValueObject;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.util.POILogFactory;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;

public class NexGenExcelExporter {
    protected XSSFWorkbook workbook;
    private XSSFSheet sheet;
    private List<NexGenValueObject> listValueObjects;
    POILogFactory f;

    public NexGenExcelExporter(List<NexGenValueObject> listValueObjects) {
        this.listValueObjects = listValueObjects;
        workbook = new XSSFWorkbook();
    }

    protected boolean writeHeaderLine() {
        sheet = workbook.createSheet("DefaultSheet");
        Row row = sheet.createRow(0);
        CellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setBold(true);
        font.setFontHeight(16);
        style.setFont(font);

        if(listValueObjects!=null && listValueObjects.size()>0) {
            NexGenValueObject vo = listValueObjects.get(0);
            LinkedHashMap<String, String> metaData = vo.getMetaData();
            int column=0;
            Set<String> E = metaData.keySet();
            for(String columnName: E) {
                createCell(row, column++, columnName, style);
            }
            return true;
        }else{
            return false;
        }
    }

    private void createCell(Row row, int columnCount, Object value, CellStyle style) {
        sheet.autoSizeColumn(columnCount);
        Cell cell = row.createCell(columnCount);
        if (value instanceof Integer) {
            cell.setCellValue((Integer) value);
        } else if (value instanceof Boolean) {
            cell.setCellValue((Boolean) value);
        }else {
            cell.setCellValue((String) value);
        }
        cell.setCellStyle(style);
    }

    protected void writeDataLines() {
        int rowCount = 1;

        CellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setFontHeight(14);
        style.setFont(font);

        for (NexGenValueObject vo : listValueObjects) {
            Row row = sheet.createRow(rowCount++);
            LinkedHashMap<String, Object> data = vo.getDataValues();
            int column=0;
            Set<String> E = data.keySet();
            for(String columnName: E) {
                createCell(row, column++, data.get(columnName), style);
            }
        }
    }

    public void export(HttpServletResponse response) throws IOException {
        ServletOutputStream outputStream = response.getOutputStream();
        if(writeHeaderLine()) {
            writeDataLines();
            workbook.write(outputStream);
            workbook.close();
        }
        outputStream.close();
    }
}
=== vo
package com.rbc.nexgen.eureka.core;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.util.LinkedHashMap;
import java.util.Set;

/**
 * Base class for other model or entity classes to inherit from.
 */
public class NexGenValueObject implements Serializable {
    LinkedHashMap<String, String> metaData = new LinkedHashMap<String, String>();
    LinkedHashMap<String, Field> dataFields = new LinkedHashMap<String, Field>();
    LinkedHashMap<String, Object> dataValues = new LinkedHashMap<String, Object>();

    public NexGenValueObject() {
        /*
         * Data values are not available at the time of an object construction.
         * We will populate data field values later when using getters/setters of the data.
         */
        dataValues = null;
        /*
         * Metadata is available at the time of an object construction, therefore, we populate it here.
         * Data fields are needed when updating values, e.g. when using a "set" methods (not for setRaw).
         */
        metaData = null;
        dataFields = null;
    }
    public void setDataValuesRaw(LinkedHashMap<String, Object> dataValues){
        this.dataValues = dataValues;
    }
    /**
     * We are collecting just data types meta data, e.g. java.lang.String, java.util.Date.
     *
     * @return
     */
    public LinkedHashMap<String, String> getMetaData() {
        if(metaData==null) {
            metaData = new LinkedHashMap<String, String>();
            dataFields = new LinkedHashMap<String, Field>();

            Field[] fieldList = this.getClass().getDeclaredFields();

            for (Field name : fieldList) {
                /**
                 * The fields metaData, dataFields, dataValues are not business data, we ignore them.
                 */
                if(name.getName().equals("metaData")
                        || name.getName().equals("dataFields")
                        || name.getName().equals("dataValues")){
                    //N/A
                }else {
                    metaData.put(name.getName(), name.getType().getCanonicalName());
                    dataFields.put(name.getName(), name);
                    try {
                       // dataValues.put(name.getName(), name.get(this));
                    }catch (Exception ex){
                        //TODO see what to use null or ""
                        //dataValues.put(name.getName(), "");
                    }
                }
            }
        }
        return metaData;
    }

    public void setJsonData(String jsonData, String fieldNames){
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            LinkedHashMap<String, String> additionalData = objectMapper.readValue(jsonData, LinkedHashMap.class);
            //TODO split fieldNames, loop over fieldNames, take values from data, set the values
            set(fieldNames, additionalData.get(fieldNames));
        }catch (Exception e){
            //TODO handle exception
            e.printStackTrace();
        }
    }

    public String getTyeForName(String name) {
        String type = this.getMetaData().get(name);
        if (type == null)
            type = "";

        return type;
    }

    public LinkedHashMap<String, Object> getDataValuesRaw() {
        return this.dataValues;
    }
    public LinkedHashMap<String, Object> getDataValues() {
        if (metaData == null)
            getMetaData();

        if (dataValues == null) {
            dataValues = new LinkedHashMap<String, Object>();

            Field[] fieldList = this.getClass().getDeclaredFields();

            for (Field name : fieldList) {
                try {
                    if(name.getName().equals("metaData")
                            || name.getName().equals("dataFields")
                            || name.getName().equals("dataValues")){
                        //N/A
                    }else {
                        dataValues.put(name.getName(), name.get(this));
                    }
                } catch (IllegalArgumentException | IllegalAccessException e) {
                    //TODO see what to use: null or ""
                    dataValues.put(name.getName(), "");
                }
            }
        }
        return dataValues;
    }

    public int size() {
        return dataValues != null ? dataValues.size() : 0;
    }

    public void clear() {
        if (dataValues != null)
            dataValues.clear();
    }

    public Set<String> getOrder() {
        if (dataValues == null)
            dataValues = getDataValues();

        return dataValues.keySet();
    }

    public void setRaw(String name, Object value) {
        if (dataValues == null) {
            dataValues = new LinkedHashMap<String, Object>();
        }
        dataValues.put(name, value);
    }

    public void set(String name, Object value) {
        set(name, value, true);
    }
    public void set(String name, Object value, boolean saveToOriginalObject) {
        if (metaData == null)
            getMetaData();

        if (dataValues == null)
            getDataValues();

        Field field = dataFields.get(name);

        try {
            if(field==null){
                //new field
                metaData.put(name,"java.lang.String");
                dataValues.put(name, value);

            } else {
                //save to duplicate data collection (we use it for validation purpose)
                dataValues.put(name, value);
                //save to original object
                //This If statement is needed since field.set causes Exception when
                //using NexGenBeanPropertyRowMapper java reflection (field.set is private,....
                if(saveToOriginalObject)
                    field.set(this, value);
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    public Object getValue(String name) {
        if (dataValues == null)
            dataValues = getDataValues();

        Object o = dataValues.get(name);
        return o;
    }

    public String get(String name) {
        return getAsString(name);
    }

    public String getAsString(String name) {
        Object o = getValue(name);
        if (o == null)
            return "";
        else
            return o.toString();
    }

    public String getAsStringOrZero(String name) {
        Object o = getValue(name);
        if (o != null) {
            String s = o.toString().trim();
            if (s.length() > 0)
                return o.toString();
            else
                return "0";
        } else
            return "0";
    }

    //Integer
    public int getValueAsInt(String name, int defaultValue) {
        int value;

        try {
            String stringValue = getAsString(name);
            if(stringValue.length()==0)
                stringValue = "0";
            value = Integer.parseInt(stringValue);
            if(value == 0)
                return defaultValue;
        } catch (Exception e) {
            value = 0;
        }
        return value;
    }

    public int getAsInt(String name) {
        try {
            return Integer.parseInt(getAsStringOrZero(name));
        } catch (Exception e) {
            return 0;
        }
    }
    public Integer getAsIntegerObject(String name) {
        return Integer.valueOf(getAsStringOrZero(name));
    }
    //Short
    public short getAsShort(String name) {
        try {
            return Short.parseShort(getAsStringOrZero(name));
        } catch (Exception e) {
            return 0;
        }
    }
    public Short getAsShortObject(String name) {
        return Short.valueOf(getAsStringOrZero(name));
    }
    //Long
    public long getAsLong(String name) {
        return Long.parseLong(getAsStringOrZero(name));
    }

    public Long getAsLongObject(String name) {
        return Long.valueOf(getAsStringOrZero(name));
    }
    //Float
    public float getAsFloat(String name) {
        return Float.parseFloat(getAsStringOrZero(name));
    }
    public Float getAsFloatObject(String name) {
        return Float.valueOf(getAsStringOrZero(name));
    }
    //Double
    public double getAsDouble(String name) {
        return Double.parseDouble(getAsStringOrZero(name));
    }
    public Double getAsDoubleObject(String name) {
        return Double.valueOf(getAsStringOrZero(name));
    }
    // BigDecimal
    public BigDecimal getAsBigDecimal(String name) {
        return new BigDecimal(getAsStringOrZero(name));
    }

    public Object getAsJavaType(String name) {
        String type = getTyeForName(name);

        if (type.equals("java.lang.String")) {
            return getAsString(name);
        } else if (type.equals("java.util.Date")) {
            //java.sql.Timestamp t = getAsSqlTimestamp(name);
            //return new java.util.Date(t.getTime());
            return null;
        } else if (type.equals("java.sql.Timestamp")) {
            //return getAsSqlTimestamp(name);
            return null;
        } else if (type.equals("java.lang.Double")) {
            return getAsDoubleObject(name);
        } else if (type.equals("double")) {
            return getAsDoubleObject(name);
        } else if (type.equals("java.lang.Integer")) {
            return getAsIntegerObject(name);
        } else if (type.equals("int")) {
            return getAsIntegerObject(name);
        } else if (type.equals("java.lang.Short")) {
            return getAsShortObject(name);
        } else if (type.equals("short")) {
            return getAsShortObject(name);
        }else if (type.equals("java.lang.Float")) {
            return getAsFloatObject(name);
        } else if (type.equals("float")) {
            return getAsFloatObject(name);
        }else if (type.equals("java.math.BigDecimal")) {
            return getAsBigDecimal(name);
        } else if (type.equals("java.lang.Long")) {
            return getAsLongObject(name);
        }else if (type.equals("long")) {
            return getAsLongObject(name);
        }
        return "";
    }
}

