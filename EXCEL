   @GetMapping("/excel")
    public void exportToExcel(HttpServletResponse response) throws Exception {
        response.setContentType("application/octet-stream");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
        String currentDateTime = dateFormatter.format(new Date());

        String headerKey = "Content-Disposition";
        String headerValue = "attachment; filename=users_" + currentDateTime + ".xlsx";
        response.setHeader(headerKey, headerValue);

        List<NexGenValueObject> listValueObjects = new ArrayList<NexGenValueObject>();
        /**
         * To enable export of SQL Entity data to Excel, make all Entity attributes public,
         * extend NexGenValueObject, do mapping in a FOR loop Entity to NexGenValueObject.
         */
        List<BusinessUnit> listBusinessUnits = (List<BusinessUnit>) businessUnitRepository.findAll();
        for(BusinessUnit row: listBusinessUnits){
            listValueObjects.add(row);
        }
        XSSFWorkbook excelFile = NexGenExcelUtils.prepareExcelFromData(listValueObjects);
        ServletOutputStream outputStream = response.getOutputStream();
        excelFile.write(outputStream);
        excelFile.close();
        outputStream.close();
    }
    
    package com.rbc.nexgen.eureka.core.excel;

import com.rbc.nexgen.eureka.core.NexGenValueObject;
import lombok.experimental.UtilityClass;
import lombok.extern.log4j.Log4j2;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;

//https://www.petrikainulainen.net/programming/spring-framework/spring-batch-tutorial-reading-information-from-an-excel-file/
@Log4j2
@UtilityClass
public class NexGenExcelUtils {

    public static XSSFWorkbook prepareExcelFromData(List<NexGenValueObject> data) throws Exception {
        NexGenExcelExporter nexGenExcelExporter = new NexGenExcelExporter(data);
        if(nexGenExcelExporter.writeHeaderLine()) {
            nexGenExcelExporter.writeDataLines();
        }
        return nexGenExcelExporter.workbook;
    }
    //TODO accept the list with explicit classes instead of NexGenValueObject e.g. Application
    public static List<NexGenValueObject> loadListFromExcel(String excelFileName) throws Exception {
        File xlsFile = new File(excelFileName);
        String ext = getFileExtension(excelFileName);

        if (ext.equalsIgnoreCase("xls")) {
            //Old Excel format
            return loadListFromExcelXls(xlsFile);
        } else if (ext.equalsIgnoreCase("xlsx")) {
            //New Excel format
            return loadListFromExcelXlsx(xlsFile);
        } else {
            throw new Exception("EXCEPTION - FILE EXTENSION NOT RECOGNIZED, IT SHOULD XLS or XLSX");
        }
    }
    public static List<NexGenValueObject> loadListFromExcelXls(File xlsFile) throws Exception {
        List<NexGenValueObject> valueObjectsList = new ArrayList<>();
        InputStream xlsFIS = new FileInputStream(xlsFile);
        Workbook workbook = new HSSFWorkbook(xlsFIS);
        xlsFIS.close();
        Sheet sheet = workbook.getSheetAt(0);//TODO see name instead of number
        //Here we keep the names of the columns
        LinkedHashMap<String, String> metaData = new LinkedHashMap<String, String>();
        // Iterate through each rows from first sheet
        Iterator<Row> rowIterator = sheet.iterator();
        int rowCount = 1;
        while (rowIterator.hasNext()) {
            NexGenValueObject valueObject = new NexGenValueObject();
            Row row = rowIterator.next();
            //Fore each row iterate through each column
            Iterator<Cell> cellIterator = row.cellIterator();

            while (cellIterator.hasNext()) {

                Cell cell = cellIterator.next();
                int cellIndex = cell.getColumnIndex();
                String cellValue="";

                switch (cell.getCellType()) {
                    case BLANK:
                    case ERROR:
                        cellValue="";
                        break;
                    case BOOLEAN:
                        cellValue= String.valueOf(cell.getBooleanCellValue());
                        break;
                    case NUMERIC:
                        cellValue= String.valueOf(cell.getNumericCellValue());
                        break;
                    case STRING:
                        cellValue= String.valueOf(cell.getStringCellValue());
                        break;
                    default:
                        cellValue="";
                        log.info("UNKNOWN"+cell.getColumnIndex());
                        break;
                }

                if(rowCount==1){
                    //first row we assume has header (column names)
                    metaData.put(String.valueOf(cellIndex), cellValue);
                } else {
                    //get the column name from metadata (row #1) saved
                    valueObject.setRaw(metaData.get(String.valueOf(cellIndex)),cellValue);
                }
            }
            if(rowCount>1) {
                valueObjectsList.add(valueObject);
            }
            rowCount++;
        }
        return valueObjectsList;
    }

    public static List<NexGenValueObject> loadListFromExcelXlsx(File xlsFile){
        //TODO for a new Excel (xlsx) file later (after the project MVP phase)
        List<NexGenValueObject> valueObjectsList = new ArrayList<>();
        return valueObjectsList;
    }

    private static String getFileExtension(String fileName) {
        String ext = "";
        int mid = fileName.lastIndexOf(".");
        ext = fileName.substring(mid + 1, fileName.length());
        return ext;
    }
}
package com.rbc.nexgen.eureka.core.excel;

import com.rbc.nexgen.eureka.core.NexGenValueObject;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.util.POILogFactory;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;

public class NexGenExcelExporter {
    protected XSSFWorkbook workbook;
    private XSSFSheet sheet;
    private List<NexGenValueObject> listValueObjects;
    POILogFactory f;

    public NexGenExcelExporter(List<NexGenValueObject> listValueObjects) {
        this.listValueObjects = listValueObjects;
        workbook = new XSSFWorkbook();
    }

    protected boolean writeHeaderLine() {
        sheet = workbook.createSheet("DefaultSheet");
        Row row = sheet.createRow(0);
        CellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setBold(true);
        font.setFontHeight(16);
        style.setFont(font);

        if(listValueObjects!=null && listValueObjects.size()>0) {
            NexGenValueObject vo = listValueObjects.get(0);
            LinkedHashMap<String, String> metaData = vo.getMetaData();
            int column=0;
            Set<String> E = metaData.keySet();
            for(String columnName: E) {
                createCell(row, column++, columnName, style);
            }
            return true;
        }else{
            return false;
        }
    }

    private void createCell(Row row, int columnCount, Object value, CellStyle style) {
        sheet.autoSizeColumn(columnCount);
        Cell cell = row.createCell(columnCount);
        if (value instanceof Integer) {
            cell.setCellValue((Integer) value);
        } else if (value instanceof Boolean) {
            cell.setCellValue((Boolean) value);
        }else {
            cell.setCellValue((String) value);
        }
        cell.setCellStyle(style);
    }

    protected void writeDataLines() {
        int rowCount = 1;

        CellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setFontHeight(14);
        style.setFont(font);

        for (NexGenValueObject vo : listValueObjects) {
            Row row = sheet.createRow(rowCount++);
            LinkedHashMap<String, Object> data = vo.getDataValues();
            int column=0;
            Set<String> E = data.keySet();
            for(String columnName: E) {
                createCell(row, column++, data.get(columnName), style);
            }
        }
    }

    public void export(HttpServletResponse response) throws IOException {
        ServletOutputStream outputStream = response.getOutputStream();
        if(writeHeaderLine()) {
            writeDataLines();
            workbook.write(outputStream);
            workbook.close();
        }
        outputStream.close();
    }
}
