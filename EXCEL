spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
package com.rbc.nexgen.eureka.bcm.exporter;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import com.rbc.nexgen.eureka.bcm.entity.NexGenUser;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class UserExcelExporter {
    private XSSFWorkbook workbook;
    private XSSFSheet sheet;
    private List<NexGenUser> listUsers;

    public UserExcelExporter(List<NexGenUser> listUsers) {
        this.listUsers = listUsers;
        workbook = new XSSFWorkbook();
    }


    private void writeHeaderLine() {
        sheet = workbook.createSheet("Users");

        Row row = sheet.createRow(0);

        CellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setBold(true);
        font.setFontHeight(16);
        style.setFont(font);

        createCell(row, 0, "User ID", style);
        createCell(row, 1, "First Name", style);
        createCell(row, 2, "Last Name", style);
    }

    private void createCell(Row row, int columnCount, Object value, CellStyle style) {
        sheet.autoSizeColumn(columnCount);
        Cell cell = row.createCell(columnCount);
        if (value instanceof Integer) {
            cell.setCellValue((Integer) value);
        } else if (value instanceof Boolean) {
            cell.setCellValue((Boolean) value);
        }else {
            cell.setCellValue((String) value);
        }
        cell.setCellStyle(style);
    }

    private void writeDataLines() {
        int rowCount = 1;

        CellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setFontHeight(14);
        style.setFont(font);

        for (NexGenUser user : listUsers) {
            Row row = sheet.createRow(rowCount++);
            int columnCount = 0;

            createCell(row, columnCount++, user.getId(), style);
            createCell(row, columnCount++, user.getFirstName(), style);
            createCell(row, columnCount++, user.getLastName(), style);

        }
    }

    public void export(HttpServletResponse response) throws IOException {
        writeHeaderLine();
        writeDataLines();
        ServletOutputStream outputStream = response.getOutputStream();
        workbook.write(outputStream);
        workbook.close();
        outputStream.close();
    }
}
=====================
package com.rbc.nexgen.eureka.bcm.entity;

import lombok.Data;

import javax.persistence.*;

/**
 * http://localhost:10761/nexGenUsers/1
 */
@Data
@Entity
@Table(name="nex_gen_user")
public class NexGenUser {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int id;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;
}
============================
package com.rbc.nexgen.eureka.bcm.controller;

import com.rbc.nexgen.eureka.bcm.entity.NexGenUser;
import com.rbc.nexgen.eureka.bcm.exporter.UserExcelExporter;
import com.rbc.nexgen.eureka.service.UserService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * In case we need to have to send response in XML format do the following:
 * https://www.udemy.com/course/spring-springboot-jpa-hibernate-zero-to-master/learn/lecture/31136684#overview
 * Lesson 214
 * 1. Add jackson-dataformat-xml to pom.xml
 * 2. Change @RequestMapping annotation (, producers =
 * 		{MediaType.APPLICATION_JSON_VALUE, MediaTYpe.APPLICATION_XML_VALUE}
 * 3. Caller has to add Accept = application/xml to header
 */
@RestController
@Slf4j
@CrossOrigin(origins="*")
@RequestMapping("/bcm")

public class BcmRestController {

	@Autowired
	private UserService service;

	@GetMapping("/excel")
	public void exportToExcel(HttpServletResponse response) throws IOException {
		response.setContentType("application/octet-stream");
		DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
		String currentDateTime = dateFormatter.format(new Date());

		String headerKey = "Content-Disposition";
		String headerValue = "attachment; filename=users_" + currentDateTime + ".xlsx";
		response.setHeader(headerKey, headerValue);

		List<NexGenUser> listUsers = service.listAll();

		UserExcelExporter excelExporter = new UserExcelExporter(listUsers);

		excelExporter.export(response);
	}
}
=====================
package com.rbc.nexgen.eureka.bcm.exporter;

import com.rbc.nexgen.eureka.bcm.entity.NexGenValueObject;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;

public class GenericExcelExporter {
    private XSSFWorkbook workbook;
    private XSSFSheet sheet;
    private List<NexGenValueObject> listValueObjects;

    public GenericExcelExporter(List<NexGenValueObject> listValueObjects) {
        this.listValueObjects = listValueObjects;
        workbook = new XSSFWorkbook();
    }


    private boolean writeHeaderLine() {
        sheet = workbook.createSheet("DefaultSheet");

        Row row = sheet.createRow(0);

        CellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setBold(true);
        font.setFontHeight(16);
        style.setFont(font);

        if(listValueObjects!=null && listValueObjects.size()>0) {
            NexGenValueObject vo = listValueObjects.get(0);
            LinkedHashMap<String, String> metaData = vo.getMetaData();
            int column=0;
            for(String columnName: metaData.keySet()) {
                createCell(row, column++, columnName, style);
            }
            return true;
        }else{
            return false;
        }
    }

    private void createCell(Row row, int columnCount, Object value, CellStyle style) {
        sheet.autoSizeColumn(columnCount);
        Cell cell = row.createCell(columnCount);
        if (value instanceof Integer) {
            cell.setCellValue((Integer) value);
        } else if (value instanceof Boolean) {
            cell.setCellValue((Boolean) value);
        }else {
            cell.setCellValue((String) value);
        }
        cell.setCellStyle(style);
    }

    private void writeDataLines() {
        int rowCount = 1;

        CellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setFontHeight(14);
        style.setFont(font);

        for (NexGenValueObject vo : listValueObjects) {
            Row row = sheet.createRow(rowCount++);
            LinkedHashMap<String, Object> data = vo.getDataValuesRaw();
            int column=0;
            for(String columnName: data.keySet()) {
                createCell(row, column++, data.get(columnName), style);
            }
        }
    }

    public void export(HttpServletResponse response) throws IOException {
        ServletOutputStream outputStream = response.getOutputStream();
        if(writeHeaderLine()) {
            writeDataLines();
            workbook.write(outputStream);
            workbook.close();
        }
        outputStream.close();
    }
}
======
//TODO NexGenValueObject
		List<NexGenValueObject> listVo = new ArrayList<NexGenValueObject>();
		NexGenValueObject vo1 = new NexGenValueObject();
		vo1.getMetaData();
		vo1.set("id","1000");
		vo1.set("name","xyz");
		listVo.add(vo1);

		NexGenValueObject vo2 = new NexGenValueObject();
		vo2.getMetaData();
		vo2.set("id","10001");
		vo2.set("name","xyzq");
		listVo.add(vo1);
